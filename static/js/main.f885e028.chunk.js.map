{"version":3,"sources":["components/Message.js","api/requests/requests.js","components/StartGame.js","components/Puzzle.js","components/Alphabet.js","components/Hangman.js","App.js","serviceWorker.js","index.js"],"names":["Messsage","_this$props$puzzle","this","props","puzzle","status","remainingGuesses","word","concat","join","react_default","a","createElement","statusMessage","Component","getPuzzle","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","wordCount","response","data","wrap","_context","prev","next","fetch","sent","json","abrupt","Error","stop","_x","apply","arguments","StartGame","puzzleState","getWord","toLowerCase","split","startGame","className","onClick","bind","Puzzle","map","index","key","letter","Alphabet","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","letterClick","setState","charakters","state","letters","_this2","en","document","addEventListener","chooseLetter","nextProps","reset","_this3","guessedLetters","includes","Hangman","character","makeGuess","finished","every","guess","isUnique","isBadGuess","toConsumableArray","calculateStatus","forEach","_this4","window","e","String","fromCharCode","charCode","_this5","_this$state","components_Puzzle","components_Alphabet","Message","components_StartGame","App","components_Hangman","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f885e028.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Messsage extends Component {\r\n\tstatusMessage() {\r\n\t\tlet { status, remainingGuesses, word } = this.props.puzzle\r\n\t\tif (status === 'playing') {\r\n\t\t\treturn `Guesses left: ${remainingGuesses}`\r\n\t\t} else if (status === 'failed') {\r\n\t\t\treturn `Nice try! The word was \"${word.join('')}\".`\r\n\t\t} else {\r\n\t\t\treturn 'Great work! You guessed the word.'\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<p>{this.statusMessage()}</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Messsage\r\n","const getPuzzle = async wordCount => {\r\n\tconst response = await fetch(`//puzzle.mead.io/puzzle?wordCount=${wordCount}`)\r\n\r\n\tif (response.status === 200) {\r\n\t\tconst data = await response.json()\r\n\t\treturn data.puzzle\r\n\t} else {\r\n\t\tthrow new Error('Unable to get puzzle')\r\n\t}\r\n}\r\n\r\nexport default getPuzzle\r\n","import React, { Component } from 'react'\r\nimport getPuzzle from '../api/requests/requests'\r\n\r\nclass StartGame extends Component {\r\n\tasync startGame() {\r\n\t\tconst puzzleState = await getPuzzle('2')\r\n\t\tthis.props.getWord(puzzleState.toLowerCase().split(''))\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.startGame()\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button className=\"button\" onClick={this.startGame.bind(this)}>\r\n\t\t\t\t\tReset game\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default StartGame\r\n","import React from 'react'\r\n\r\nconst Puzzle = ({ puzzleState }) => {\r\n\treturn (\r\n\t\t<div className=\"puzzle\">\r\n\t\t\t{puzzleState &&\r\n\t\t\t\tpuzzleState.map((word, index) => (\r\n\t\t\t\t\t<div className=\"word\" key={`${index}-div`}>\r\n\t\t\t\t\t\t{word.split('').map((letter, index) => (\r\n\t\t\t\t\t\t\t<span key={index} className={letter !== '*' ? 'puzzle-transition' : null}>\r\n\t\t\t\t\t\t\t\t{letter}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Puzzle\r\n","import React, { Component } from 'react'\r\nimport en from '../api/alphabet/en.json'\r\n\r\nclass Alphabet extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tletters: [],\r\n\t\t\tcharakters: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({ letters: en })\r\n\t\tdocument.addEventListener('click', () => {\r\n\t\t\tthis.state.charakters && this.props.chooseLetter(this.state.charakters)\r\n\t\t})\r\n\t}\r\n\r\n\tcomponentDidUpdate(nextProps) {\r\n\t\tthis.props.reset !== nextProps.reset && this.setState({ charakters: '' })\r\n\t}\r\n\r\n\tletterClick = letter => {\r\n\t\tthis.setState({ charakters: letter })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { letters } = this.state\r\n\t\treturn (\r\n\t\t\t<div className=\"letters\">\r\n\t\t\t\t{letters.map((letter, index) => (\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tkey={`letter-${index}`}\r\n\t\t\t\t\t\tonClick={() => this.letterClick(letter)}\r\n\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\tthis.props.guessedLetters && this.props.guessedLetters.includes(letter)\r\n\t\t\t\t\t\t\t\t? 'selected-letter'\r\n\t\t\t\t\t\t\t\t: 'unselected-letter'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{letter}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Alphabet\r\n","import React, { Component } from 'react'\r\nimport Message from './Message'\r\nimport StartGame from './StartGame'\r\nimport Puzzle from './Puzzle'\r\nimport Alphabet from './Alphabet'\r\n\r\nclass Hangman extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {}\r\n\t}\r\n\r\n\tgetWord(word) {\r\n\t\tthis.setState({\r\n\t\t\tword,\r\n\t\t\tremainingGuesses: 5,\r\n\t\t\tguessedLetters: [],\r\n\t\t\tpuzzleState: '',\r\n\t\t\tstatus: 'playing',\r\n\t\t\treset: true\r\n\t\t})\r\n\t\tthis.puzzle()\r\n\t}\r\n\r\n\tcalculateStatus() {\r\n\t\tconst finished = this.state.word.every(\r\n\t\t\tletter => this.state.guessedLetters.includes(letter) || letter === ' '\r\n\t\t)\r\n\r\n\t\tif (this.state.remainingGuesses === 0) {\r\n\t\t\tthis.setState({ status: 'failed' })\r\n\t\t} else if (finished) {\r\n\t\t\tthis.setState({ status: 'finished' })\r\n\t\t} else {\r\n\t\t\tthis.setState({ status: 'playing' })\r\n\t\t}\r\n\t}\r\n\r\n\tmakeGuess(guess) {\r\n\t\tguess = guess.toLowerCase()\r\n\t\tconst isUnique = !this.state.guessedLetters.includes(guess)\r\n\t\tconst isBadGuess = !this.state.word.includes(guess)\r\n\r\n\t\tif (this.state.status !== 'playing') {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (isUnique) {\r\n\t\t\tthis.setState({ guessedLetters: [...this.state.guessedLetters, guess] })\r\n\t\t}\r\n\r\n\t\tif (isUnique && isBadGuess) {\r\n\t\t\tthis.setState({ remainingGuesses: this.state.remainingGuesses - 1 })\r\n\t\t}\r\n\r\n\t\tthis.puzzle()\r\n\t\tthis.calculateStatus()\r\n\t}\r\n\r\n\tpuzzle() {\r\n\t\tlet puzzle = ''\r\n\t\tthis.state.word.forEach(letter => {\r\n\t\t\tif (this.state.guessedLetters.includes(letter) || letter === ' ') {\r\n\t\t\t\tpuzzle += letter\r\n\t\t\t} else {\r\n\t\t\t\tpuzzle += '*'\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.setState({ puzzleState: puzzle.split(' ') })\r\n\t}\r\n\r\n\tchooseLetter = character => {\r\n\t\tthis.makeGuess(character)\r\n\t\tthis.setState({ reset: false })\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\twindow.addEventListener('keypress', e => {\r\n\t\t\tconst guess = String.fromCharCode(e.charCode)\r\n\t\t\tthis.makeGuess(guess)\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { puzzleState, guessedLetters, reset } = this.state\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Puzzle puzzleState={puzzleState} />\r\n\t\t\t\t<Alphabet\r\n\t\t\t\t\tchooseLetter={character => this.chooseLetter(character)}\r\n\t\t\t\t\treset={reset}\r\n\t\t\t\t\tguessedLetters={guessedLetters}\r\n\t\t\t\t/>\r\n\t\t\t\t<Message puzzle={this.state} />\r\n\t\t\t\t<StartGame getWord={word => this.getWord(word)} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Hangman\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\n\r\nimport Hangman from './components/Hangman'\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Hangman />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}