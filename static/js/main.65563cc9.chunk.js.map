{"version":3,"sources":["components/Message.js","api/requests/requests.js","components/StartGame.js","components/Puzzle.js","App.js","serviceWorker.js","index.js"],"names":["Messsage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this$props$puzzle","puzzle","status","remainingGuesses","word","concat","join","react_default","a","createElement","statusMessage","Component","getPuzzle","_ref","asyncToGenerator","regenerator_default","mark","_callee","wordCount","response","data","wrap","_context","prev","next","fetch","sent","json","abrupt","Error","stop","_x","apply","arguments","StartGame","puzzleState","getWord","toLowerCase","split","startGame","className","onClick","bind","Puzzle","setState","guessedLetters","_this2","forEach","letter","includes","_this3","finished","every","guess","isUnique","isBadGuess","toConsumableArray","calculateStatus","_this4","window","addEventListener","e","String","fromCharCode","charCode","makeGuess","_this5","map","index","key","Message","components_StartGame","App","components_Puzzle","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QA2BeA,cAxBd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFKP,+EAIH,IAAAQ,EAC0BL,KAAKJ,MAAMU,OAA9CC,EADSF,EACTE,OAAQC,EADCH,EACDG,iBAAkBC,EADjBJ,EACiBI,KAChC,MAAe,YAAXF,EACH,iBAAAG,OAAwBF,GACH,WAAXD,EACV,2BAAAG,OAAkCD,EAAKE,KAAK,IAA5C,MAEO,qEAKR,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SAAId,KAAKe,yBAnBUC,oCCSRC,EAXA,eAAAC,EAAApB,OAAAqB,EAAA,EAAArB,CAAAsB,EAAAP,EAAAQ,KAAG,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAA,OAAAL,EAAAP,EAAAa,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAK,qCAAApB,OAAsCa,IADjD,UAGO,OAFlBC,EADWG,EAAAI,MAGJxB,OAHI,CAAAoB,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAIGL,EAASQ,OAJZ,cAIVP,EAJUE,EAAAI,KAAAJ,EAAAM,OAAA,SAKTR,EAAKnB,QALI,cAOV,IAAI4B,MAAM,wBAPA,yBAAAP,EAAAQ,SAAAb,EAAAtB,SAAH,gBAAAoC,GAAA,OAAAlB,EAAAmB,MAAArC,KAAAsC,YAAA,GCwBAC,oTAnBatB,EAAU,YAA9BuB,SACNxC,KAAKJ,MAAM6C,QAAQD,EAAYE,cAAcC,MAAM,mJAInD3C,KAAK4C,6CAIL,OACChC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,SAASC,QAAS9C,KAAK4C,UAAUG,KAAK/C,OAAxD,sBAboBgB,aCmGTgC,cAjGd,SAAAA,EAAYpD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IAClBnD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,KAAMJ,KACDQ,MAAQ,GAFKP,uEAKXY,GACPT,KAAKiD,SAAS,CACbxC,OACAD,iBAAkB,EAClB0C,eAAgB,GAChBV,YAAa,GACbjC,OAAQ,YAETP,KAAKM,0CAGG,IAAA6C,EAAAnD,KACJM,EAAS,GACbN,KAAKI,MAAMK,KAAK2C,QAAQ,SAAAC,GACnBF,EAAK/C,MAAM8C,eAAeI,SAASD,IAAsB,MAAXA,EACjD/C,GAAU+C,EAEV/C,GAAU,MAIZN,KAAKiD,SAAS,CAAET,YAAalC,EAAOqC,MAAM,gDAGzB,IAAAY,EAAAvD,KACXwD,EAAWxD,KAAKI,MAAMK,KAAKgD,MAChC,SAAAJ,GAAM,OAAIE,EAAKnD,MAAM8C,eAAeI,SAASD,IAAsB,MAAXA,IAGrB,IAAhCrD,KAAKI,MAAMI,iBACdR,KAAKiD,SAAS,CAAE1C,OAAQ,WACdiD,EACVxD,KAAKiD,SAAS,CAAE1C,OAAQ,aAExBP,KAAKiD,SAAS,CAAE1C,OAAQ,8CAIhBmD,GACTA,EAAQA,EAAMhB,cACd,IAAMiB,GAAY3D,KAAKI,MAAM8C,eAAeI,SAASI,GAC/CE,GAAc5D,KAAKI,MAAMK,KAAK6C,SAASI,GAEnB,YAAtB1D,KAAKI,MAAMG,SAIXoD,GAAYC,GACf5D,KAAKiD,SAAS,CAAEzC,iBAAkBR,KAAKI,MAAMI,iBAAmB,IAG7DmD,GACH3D,KAAKiD,SAAS,CAAEC,eAAepD,OAAA+D,EAAA,EAAA/D,CAAKE,KAAKI,MAAM8C,gBAAjBxC,OAAA,CAAiCgD,MAGhE1D,KAAKM,SACLN,KAAK8D,+DAGc,IAAAC,EAAA/D,KACnBgE,OAAOC,iBAAiB,WAAY,SAAAC,GACnC,IAAMR,EAAQS,OAAOC,aAAaF,EAAEG,UACpCN,EAAKO,UAAUZ,sCAIR,IAAAa,EAAAvE,KACAwC,EAAgBxC,KAAKI,MAArBoC,YACR,OACC5B,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACdjC,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,cACjBjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,UACbL,GACAA,EAAYgC,IACX,SAACnB,EAAQoB,GAAT,MACY,MAAXpB,EACCzC,EAAAC,EAAAC,cAAA,QAAM4D,IAAKD,GAAQpB,GAEnBzC,EAAAC,EAAAC,cAAA,QAAM4D,IAAKD,EAAO5B,UAAU,cAC1BQ,MAKPzC,EAAAC,EAAAC,cAAC6D,EAAD,CAASrE,OAAQN,KAAKI,QACtBQ,EAAAC,EAAAC,cAAC8D,EAAD,CAAWnC,QAAS,SAAAhC,GAAI,OAAI8D,EAAK9B,QAAQhC,eA3FzBO,aCWN6D,mLARb,OACCjE,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACdjC,EAAAC,EAAAC,cAACgE,EAAD,cAJc9D,aCOE+D,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.65563cc9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Messsage extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {}\r\n\t}\r\n\tstatusMessage() {\r\n\t\tlet { status, remainingGuesses, word } = this.props.puzzle\r\n\t\tif (status === 'playing') {\r\n\t\t\treturn `Guesses left: ${remainingGuesses}`\r\n\t\t} else if (status === 'failed') {\r\n\t\t\treturn `Nice try! The word was \"${word.join('')}\".`\r\n\t\t} else {\r\n\t\t\treturn 'Great work! You guessed the word.'\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<p>{this.statusMessage()}</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Messsage\r\n","const getPuzzle = async wordCount => {\r\n\tconst response = await fetch(`//puzzle.mead.io/puzzle?wordCount=${wordCount}`)\r\n\r\n\tif (response.status === 200) {\r\n\t\tconst data = await response.json()\r\n\t\treturn data.puzzle\r\n\t} else {\r\n\t\tthrow new Error('Unable to get puzzle')\r\n\t}\r\n}\r\n\r\nexport default getPuzzle\r\n","import React, { Component } from 'react'\r\nimport getPuzzle from '../api/requests/requests'\r\n\r\nclass StartGame extends Component {\r\n\tasync startGame() {\r\n\t\tconst puzzleState = await getPuzzle('2')\r\n\t\tthis.props.getWord(puzzleState.toLowerCase().split(''))\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.startGame()\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button className=\"button\" onClick={this.startGame.bind(this)}>\r\n\t\t\t\t\tReset game\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default StartGame\r\n","import React, { Component } from 'react'\r\nimport Message from './Message'\r\nimport StartGame from './StartGame'\r\n\r\nclass Puzzle extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {}\r\n\t}\r\n\r\n\tgetWord(word) {\r\n\t\tthis.setState({\r\n\t\t\tword,\r\n\t\t\tremainingGuesses: 5,\r\n\t\t\tguessedLetters: [],\r\n\t\t\tpuzzleState: '',\r\n\t\t\tstatus: 'playing'\r\n\t\t})\r\n\t\tthis.puzzle()\r\n\t}\r\n\r\n\tpuzzle() {\r\n\t\tlet puzzle = ''\r\n\t\tthis.state.word.forEach(letter => {\r\n\t\t\tif (this.state.guessedLetters.includes(letter) || letter === ' ') {\r\n\t\t\t\tpuzzle += letter\r\n\t\t\t} else {\r\n\t\t\t\tpuzzle += '*'\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.setState({ puzzleState: puzzle.split('') })\r\n\t}\r\n\r\n\tcalculateStatus() {\r\n\t\tconst finished = this.state.word.every(\r\n\t\t\tletter => this.state.guessedLetters.includes(letter) || letter === ' '\r\n\t\t)\r\n\r\n\t\tif (this.state.remainingGuesses === 0) {\r\n\t\t\tthis.setState({ status: 'failed' })\r\n\t\t} else if (finished) {\r\n\t\t\tthis.setState({ status: 'finished' })\r\n\t\t} else {\r\n\t\t\tthis.setState({ status: 'playing' })\r\n\t\t}\r\n\t}\r\n\r\n\tmakeGuess(guess) {\r\n\t\tguess = guess.toLowerCase()\r\n\t\tconst isUnique = !this.state.guessedLetters.includes(guess)\r\n\t\tconst isBadGuess = !this.state.word.includes(guess)\r\n\r\n\t\tif (this.state.status !== 'playing') {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (isUnique && isBadGuess) {\r\n\t\t\tthis.setState({ remainingGuesses: this.state.remainingGuesses - 1 })\r\n\t\t}\r\n\r\n\t\tif (isUnique) {\r\n\t\t\tthis.setState({ guessedLetters: [...this.state.guessedLetters, guess] })\r\n\t\t}\r\n\r\n\t\tthis.puzzle()\r\n\t\tthis.calculateStatus()\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\twindow.addEventListener('keypress', e => {\r\n\t\t\tconst guess = String.fromCharCode(e.charCode)\r\n\t\t\tthis.makeGuess(guess)\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { puzzleState } = this.state\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header className=\"App-header\">\r\n\t\t\t\t\t<div className=\"puzzle\">\r\n\t\t\t\t\t\t{puzzleState &&\r\n\t\t\t\t\t\t\tpuzzleState.map(\r\n\t\t\t\t\t\t\t\t(letter, index) =>\r\n\t\t\t\t\t\t\t\t\tletter !== ' ' ? (\r\n\t\t\t\t\t\t\t\t\t\t<span key={index}>{letter}</span>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t<span key={index} className=\"span-space\">\r\n\t\t\t\t\t\t\t\t\t\t\t{letter}\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Message puzzle={this.state} />\r\n\t\t\t\t\t<StartGame getWord={word => this.getWord(word)} />\r\n\t\t\t\t</header>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Puzzle\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\n\r\nimport Puzzle from './components/Puzzle'\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Puzzle />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}